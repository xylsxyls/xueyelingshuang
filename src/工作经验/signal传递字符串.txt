接收进程：
#include <signal.h>
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>

#define SIGDUMPFILE (SIGRTMIN + 1)

void handler(int sig, siginfo_t *info, void *ucontext) {
    printf("Signal ThreadID:%lu\n", pthread_self());
    key_t key = info->si_value.sival_int;
    int shmid = shmget(key, 1024, 0666);
    if (shmid == -1)
    {
        return;
    }
    char* message = (char*)shmat(shmid, NULL, 0);
    if (message == nullptr || message == (char*)-1)
    {
        return;
    }
    printf("Received signal %d with message %s\n", sig, message);
}

int main() {
    printf("Main ThreadID:%lu\n", pthread_self());
    struct sigaction sa;
    sa.sa_sigaction = handler;
    sa.sa_flags = SA_SIGINFO;
    sigemptyset(&sa.sa_mask);
    if (sigaction(SIGDUMPFILE, &sa, NULL) == -1) {
        perror("sigaction");
        return 1;
    }

    while (true)
    {
        sleep(1);
    }
    return 0;
}

发送进程：
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>

#define SIGDUMPFILE (SIGRTMIN + 1)
#define CLEANUP_DELAY 2 // 清理共享内存的延迟时间，单位是秒

int main() {
    pid_t pid = CSystem::processFirstPid("ConsoleTest"); // 这里填入接收信号的进程的PID

    // 创建共享内存
    key_t key = 1234; // 内核自定义的共享内存号
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);
    char *message = (char*)shmat(shmid, NULL, 0);
    strcpy(message, "dump backtrace");

    union sigval value;
    value.sival_int = key;
    if (sigqueue(pid, SIGDUMPFILE, value) == -1) {
        perror("sigqueue");
        return 1;
    }

    // 延迟一段时间后清理共享内存
    sleep(CLEANUP_DELAY);
    shmdt(message);
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}
