#include <iostream>
#include <chrono>
#include <vector>
#include <numeric>
#include <algorithm>
#include <thread>
#include <atomic>
#include <omp.h>

#ifdef _WIN32
#include <windows.h>
#include <wbemidl.h>
#include <comutil.h>
#pragma comment(lib, "wbemuuid.lib")
#pragma comment(lib, "comsuppw.lib")
#else
#include <fstream>
#include <string>
#include <x86intrin.h>
#endif

std::atomic<bool> stop(false);

long long fib(int n) {
	if (n < 2) return n;
	long long a = 0, b = 1;
	for (int i = 2; i <= n; ++i) {
		long long c = a + b;
		a = b;
		b = c;
	}
	return b;
}

void cpu_intensive_task() {
	while (!stop) {
#pragma omp parallel for
		for (int i = 0; i < 100; ++i) {
			volatile long long result = fib(50);  // 计算斐波那契数列的第50项
		}
	}
}

#ifdef __unix__
static inline uint64_t get_cycle_count()
{
	unsigned int lo,hi;
	__asm__ __volatile__ ("rdtsc" : "=a" (lo), "=d" (hi));
	return ((uint64_t)hi << 32) | lo;
}
#endif

double get_cpu_current_frequency()
{
#ifdef _WIN64
	//VC++默认只支持32位的内联汇编，若要支持64位，需要安装Intel C++ Compiler XE
	return 0;
#elif _WIN32
	//先是存放计时次数，后存放固定时间间隔值
	unsigned long int       ticks;
	//存放两固定时刻的CPU内置时钟值，值的含意为计数
	unsigned long int       stock0, stock1;
	//存放内置时钟值之差，好固定时段的计数值 
	unsigned long int       cycles;
	//存放频率，为了提高精度，采用了相邻的测的5个频率的平均值
	unsigned long int       freq[5] = { 0, 0, 0, 0, 0 };
	//循环次数
	unsigned long int       nums = 0;
	//存放频率之和
	unsigned long int       total = 0;
	LARGE_INTEGER       t0, t1;
	LARGE_INTEGER       countfreq;
	//返回高精度的计数频率，即每秒多少次;
	if (!QueryPerformanceFrequency(&countfreq))
	{
		return 0.0f;
	}
	//返回特定进程的优先级;
	DWORD priority_class = GetPriorityClass(GetCurrentProcess());
	//返回特定线程的优先级;
	int   thread_priority = GetThreadPriority(GetCurrentThread());
	//将当前进程设成实时进程;
	SetPriorityClass(GetCurrentProcess(), REALTIME_PRIORITY_CLASS);
	//设定线程优先级;
	SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_TIME_CRITICAL);
	do
	{
		nums++;
		freq[4] = freq[3];
		freq[3] = freq[2];
		freq[2] = freq[1];
		freq[1] = freq[0];
		//返回高精度计数的值;
		QueryPerformanceCounter(&t0);
		t1.LowPart = t0.LowPart;
		t1.HighPart = t0.HighPart;
		//这句中的50和后面相同语句中的1000是一个经验值，起的作用是控制时间间隔，可以
		//调节这两个值来实现最佳时间间隔。
		while ((unsigned long int)t1.LowPart - (unsigned long int)t0.LowPart < 10)
		{
			QueryPerformanceCounter(&t1);
		}
		_asm
		{
			//启动读取CPU的内置时钟，其返回值是个64位的整数，高32到EDX，低32到EAX里
			rdtsc
				//高位部份在短暂时间内是不会有变化的，故无需读出对比
				mov stock0, EAX
		}
		// 重置初始时刻
		t0.LowPart = t1.LowPart;
		t0.HighPart = t1.HighPart;
		while ((unsigned long int)t1.LowPart - (unsigned long int)t0.LowPart < 1000)
		{
			QueryPerformanceCounter(&t1);
		}
		_asm
		{
			rdtsc
				mov  stock1, EAX
		}
		cycles = stock1 - stock0;
		ticks = (unsigned long int) t1.LowPart - (unsigned long int) t0.LowPart;
		ticks = ticks * 1000000;
		ticks = ticks / countfreq.LowPart;
		if (ticks % countfreq.LowPart > countfreq.LowPart / 2)
		{
			// 使数据收敛
			ticks++;
		}
		// 求出频率，单位：MHz
		freq[0] = cycles / ticks;
		if (cycles%ticks > ticks / 2)
		{
			// 使数据收敛
			freq[0]++;
		}
		total = (freq[0] + freq[1] + freq[2] + freq[3] + freq[4]);
	} while ((nums < 5) || (nums < 100) && ((abs(5 * (long)freq[0] - (long)total) < 5)
		|| (abs(5 * (long)freq[1] - (long)total) < 5) || (abs(5 * (long)freq[2] - (long)total) < 5)
		|| (abs(5 * (long)freq[3] - (long)total) < 5) || (abs(5 * (long)freq[4] - (long)total) < 5)
		));
	//条件循环，以确保循环不少于5次，在大于5次后确保达到一定的精度后退出
	if (total / 5 != (total + 1) / 5)
	{
		// 使数据收敛
		total++;
	}
	// 恢复进程及线程的优先级别;
	SetPriorityClass(GetCurrentProcess(), priority_class);
	SetThreadPriority(GetCurrentThread(), thread_priority);
	return double(total) / 5.0;
#elif __unix__
	int delayms = 700;
	uint64_t oldTime = get_cycle_count();
	usleep(delayms * 1000);
	uint64_t newTime = get_cycle_count();
	return ((newTime - oldTime) / (delayms * 1000));
#endif
}

double test_cpu_max_frequency(int test_duration_ms) {
	std::vector<double> frequencies;

	std::thread cpu_load_thread(cpu_intensive_task);

	auto start = std::chrono::high_resolution_clock::now();
	auto end = start + std::chrono::milliseconds(test_duration_ms);

	while (std::chrono::high_resolution_clock::now() < end) {
		frequencies.push_back(get_cpu_current_frequency());
		std::this_thread::sleep_for(std::chrono::milliseconds(100));
	}

	stop = true;
	cpu_load_thread.join();

	std::sort(frequencies.begin(), frequencies.end());
	frequencies.erase(frequencies.begin(), frequencies.begin() + frequencies.size() / 10);  // 去掉最低的10%
	frequencies.erase(frequencies.end() - frequencies.size() / 10, frequencies.end());  // 去掉最高的10%

	double sum = std::accumulate(frequencies.begin(), frequencies.end(), 0.0);
	return sum / frequencies.size();
}

int main() {
	int test_duration_ms = 5000;  // 测试持续时间（毫秒）
	double average_frequency = test_cpu_max_frequency(test_duration_ms);
	std::cout << "平均CPU运行频率为: " << average_frequency << " MHz" << std::endl;
	getchar();
	return 0;
}
