// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pt {
class RspCodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RspCode> {
} _RspCode_default_instance_;
class MapDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MapData> {
} _MapData_default_instance_;
class ListDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListData> {
} _ListData_default_instance_;
class TableDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableData> {
} _TableData_default_instance_;
class KeyMapDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyMapData> {
} _KeyMapData_default_instance_;
class KeyListDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyListData> {
} _KeyListData_default_instance_;
class KeyTableDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyTableData> {
} _KeyTableData_default_instance_;
class ProtoMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoMessage> {
} _ProtoMessage_default_instance_;

namespace protobuf_ProtoMessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCode, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCode, errormessage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListData, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, listdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyMapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyMapData, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyMapData, mapdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyListData, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyListData, listdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyTableData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyTableData, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyTableData, tabledata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, rspcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, keymapdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, keylistdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMessage, keytabledata_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RspCode)},
  { 7, -1, sizeof(MapData)},
  { 14, -1, sizeof(ListData)},
  { 20, -1, sizeof(TableData)},
  { 26, -1, sizeof(KeyMapData)},
  { 33, -1, sizeof(KeyListData)},
  { 40, -1, sizeof(KeyTableData)},
  { 47, -1, sizeof(ProtoMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RspCode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyMapData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyListData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyTableData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ProtoMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _RspCode_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MapData_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ListData_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TableData_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _KeyMapData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _KeyListData_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _KeyTableData_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ProtoMessage_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RspCode_default_instance_.DefaultConstruct();
  _MapData_default_instance_.DefaultConstruct();
  _ListData_default_instance_.DefaultConstruct();
  _TableData_default_instance_.DefaultConstruct();
  _KeyMapData_default_instance_.DefaultConstruct();
  _KeyListData_default_instance_.DefaultConstruct();
  _KeyTableData_default_instance_.DefaultConstruct();
  _ProtoMessage_default_instance_.DefaultConstruct();
  _KeyMapData_default_instance_.get_mutable()->mapdata_ = const_cast< ::pt::MapData*>(
      ::pt::MapData::internal_default_instance());
  _KeyListData_default_instance_.get_mutable()->listdata_ = const_cast< ::pt::ListData*>(
      ::pt::ListData::internal_default_instance());
  _KeyTableData_default_instance_.get_mutable()->tabledata_ = const_cast< ::pt::TableData*>(
      ::pt::TableData::internal_default_instance());
  _ProtoMessage_default_instance_.get_mutable()->rspcode_ = const_cast< ::pt::RspCode*>(
      ::pt::RspCode::internal_default_instance());
  _ProtoMessage_default_instance_.get_mutable()->keymapdata_ = const_cast< ::pt::KeyMapData*>(
      ::pt::KeyMapData::internal_default_instance());
  _ProtoMessage_default_instance_.get_mutable()->keylistdata_ = const_cast< ::pt::KeyListData*>(
      ::pt::KeyListData::internal_default_instance());
  _ProtoMessage_default_instance_.get_mutable()->keytabledata_ = const_cast< ::pt::KeyTableData*>(
      ::pt::KeyTableData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022ProtoMessage.proto\022\002pt\"-\n\007RspCode\022\014\n\004c"
      "ode\030\001 \001(\005\022\024\n\014errorMessage\030\002 \001(\t\"%\n\007MapDa"
      "ta\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"\031\n\010ListDa"
      "ta\022\r\n\005value\030\001 \001(\014\"+\n\tTableData\022\036\n\010listDa"
      "ta\030\001 \003(\0132\014.pt.ListData\"7\n\nKeyMapData\022\013\n\003"
      "key\030\001 \001(\t\022\034\n\007mapData\030\002 \001(\0132\013.pt.MapData\""
      ":\n\013KeyListData\022\013\n\003key\030\001 \001(\t\022\036\n\010listData\030"
      "\002 \001(\0132\014.pt.ListData\"=\n\014KeyTableData\022\013\n\003k"
      "ey\030\001 \001(\t\022 \n\ttableData\030\002 \001(\0132\r.pt.TableDa"
      "ta\"\236\001\n\014ProtoMessage\022\034\n\007rspCode\030\001 \001(\0132\013.p"
      "t.RspCode\022\"\n\nkeyMapData\030\002 \001(\0132\016.pt.KeyMa"
      "pData\022$\n\013keyListData\030\003 \001(\0132\017.pt.KeyListD"
      "ata\022&\n\014keyTableData\030\004 \001(\0132\020.pt.KeyTableD"
      "atab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 531);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoMessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ProtoMessage_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspCode::kCodeFieldNumber;
const int RspCode::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspCode::RspCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.RspCode)
}
RspCode::RspCode(const RspCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:pt.RspCode)
}

void RspCode::SharedCtor() {
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

RspCode::~RspCode() {
  // @@protoc_insertion_point(destructor:pt.RspCode)
  SharedDtor();
}

void RspCode::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RspCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCode::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RspCode& RspCode::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RspCode* RspCode::New(::google::protobuf::Arena* arena) const {
  RspCode* n = new RspCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspCode::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.RspCode)
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

bool RspCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.RspCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.RspCode.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.RspCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.RspCode)
  return false;
#undef DO_
}

void RspCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.RspCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.RspCode.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormessage(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.RspCode)
}

::google::protobuf::uint8* RspCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.RspCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.RspCode.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.RspCode)
  return target;
}

size_t RspCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.RspCode)
  size_t total_size = 0;

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.RspCode)
  GOOGLE_DCHECK_NE(&from, this);
  const RspCode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.RspCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.RspCode)
    MergeFrom(*source);
  }
}

void RspCode::MergeFrom(const RspCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.RspCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void RspCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.RspCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCode::CopyFrom(const RspCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.RspCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCode::IsInitialized() const {
  return true;
}

void RspCode::Swap(RspCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspCode::InternalSwap(RspCode* other) {
  errormessage_.Swap(&other->errormessage_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspCode::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspCode

// int32 code = 1;
void RspCode::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 RspCode::code() const {
  // @@protoc_insertion_point(field_get:pt.RspCode.code)
  return code_;
}
void RspCode::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:pt.RspCode.code)
}

// string errorMessage = 2;
void RspCode::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RspCode::errormessage() const {
  // @@protoc_insertion_point(field_get:pt.RspCode.errorMessage)
  return errormessage_.GetNoArena();
}
void RspCode::set_errormessage(const ::std::string& value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.RspCode.errorMessage)
}
#if LANG_CXX11
void RspCode::set_errormessage(::std::string&& value) {
  
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.RspCode.errorMessage)
}
#endif
void RspCode::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.RspCode.errorMessage)
}
void RspCode::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.RspCode.errorMessage)
}
::std::string* RspCode::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:pt.RspCode.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RspCode::release_errormessage() {
  // @@protoc_insertion_point(field_release:pt.RspCode.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RspCode::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:pt.RspCode.errorMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapData::kKeyFieldNumber;
const int MapData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapData::MapData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.MapData)
}
MapData::MapData(const MapData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:pt.MapData)
}

void MapData::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MapData::~MapData() {
  // @@protoc_insertion_point(destructor:pt.MapData)
  SharedDtor();
}

void MapData::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapData::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapData& MapData::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapData* MapData::New(::google::protobuf::Arena* arena) const {
  MapData* n = new MapData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapData::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.MapData)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.MapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.MapData.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.MapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.MapData)
  return false;
#undef DO_
}

void MapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.MapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.MapData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.MapData)
}

::google::protobuf::uint8* MapData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.MapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.MapData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.MapData)
  return target;
}

size_t MapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.MapData)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.MapData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.MapData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.MapData)
    MergeFrom(*source);
  }
}

void MapData::MergeFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.MapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MapData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapData::CopyFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  return true;
}

void MapData::Swap(MapData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapData::InternalSwap(MapData* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapData::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapData

// string key = 1;
void MapData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MapData::key() const {
  // @@protoc_insertion_point(field_get:pt.MapData.key)
  return key_.GetNoArena();
}
void MapData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.MapData.key)
}
#if LANG_CXX11
void MapData::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.MapData.key)
}
#endif
void MapData::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.MapData.key)
}
void MapData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.MapData.key)
}
::std::string* MapData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pt.MapData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MapData::release_key() {
  // @@protoc_insertion_point(field_release:pt.MapData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MapData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pt.MapData.key)
}

// bytes value = 2;
void MapData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MapData::value() const {
  // @@protoc_insertion_point(field_get:pt.MapData.value)
  return value_.GetNoArena();
}
void MapData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.MapData.value)
}
#if LANG_CXX11
void MapData::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.MapData.value)
}
#endif
void MapData::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.MapData.value)
}
void MapData::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.MapData.value)
}
::std::string* MapData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pt.MapData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MapData::release_value() {
  // @@protoc_insertion_point(field_release:pt.MapData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MapData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pt.MapData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListData::ListData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.ListData)
}
ListData::ListData(const ListData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:pt.ListData)
}

void ListData::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListData::~ListData() {
  // @@protoc_insertion_point(destructor:pt.ListData)
  SharedDtor();
}

void ListData::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListData::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListData& ListData::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListData* ListData::New(::google::protobuf::Arena* arena) const {
  ListData* n = new ListData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.ListData)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.ListData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.ListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.ListData)
  return false;
#undef DO_
}

void ListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.ListData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.ListData)
}

::google::protobuf::uint8* ListData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.ListData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.ListData)
  return target;
}

size_t ListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.ListData)
  size_t total_size = 0;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.ListData)
  GOOGLE_DCHECK_NE(&from, this);
  const ListData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.ListData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.ListData)
    MergeFrom(*source);
  }
}

void ListData::MergeFrom(const ListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.ListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void ListData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.ListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListData::CopyFrom(const ListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.ListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListData::IsInitialized() const {
  return true;
}

void ListData::Swap(ListData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListData::InternalSwap(ListData* other) {
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListData::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListData

// bytes value = 1;
void ListData::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListData::value() const {
  // @@protoc_insertion_point(field_get:pt.ListData.value)
  return value_.GetNoArena();
}
void ListData::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.ListData.value)
}
#if LANG_CXX11
void ListData::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.ListData.value)
}
#endif
void ListData::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.ListData.value)
}
void ListData::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.ListData.value)
}
::std::string* ListData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pt.ListData.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListData::release_value() {
  // @@protoc_insertion_point(field_release:pt.ListData.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pt.ListData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableData::kListDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableData::TableData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.TableData)
}
TableData::TableData(const TableData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      listdata_(from.listdata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pt.TableData)
}

void TableData::SharedCtor() {
  _cached_size_ = 0;
}

TableData::~TableData() {
  // @@protoc_insertion_point(destructor:pt.TableData)
  SharedDtor();
}

void TableData::SharedDtor() {
}

void TableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableData::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableData& TableData::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableData* TableData::New(::google::protobuf::Arena* arena) const {
  TableData* n = new TableData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableData::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.TableData)
  listdata_.Clear();
}

bool TableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.TableData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pt.ListData listData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.TableData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.TableData)
  return false;
#undef DO_
}

void TableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.TableData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pt.ListData listData = 1;
  for (unsigned int i = 0, n = this->listdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->listdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.TableData)
}

::google::protobuf::uint8* TableData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.TableData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pt.ListData listData = 1;
  for (unsigned int i = 0, n = this->listdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->listdata(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.TableData)
  return target;
}

size_t TableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.TableData)
  size_t total_size = 0;

  // repeated .pt.ListData listData = 1;
  {
    unsigned int count = this->listdata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listdata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.TableData)
  GOOGLE_DCHECK_NE(&from, this);
  const TableData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.TableData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.TableData)
    MergeFrom(*source);
  }
}

void TableData::MergeFrom(const TableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.TableData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listdata_.MergeFrom(from.listdata_);
}

void TableData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.TableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableData::CopyFrom(const TableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.TableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableData::IsInitialized() const {
  return true;
}

void TableData::Swap(TableData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableData::InternalSwap(TableData* other) {
  listdata_.InternalSwap(&other->listdata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableData::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableData

// repeated .pt.ListData listData = 1;
int TableData::listdata_size() const {
  return listdata_.size();
}
void TableData::clear_listdata() {
  listdata_.Clear();
}
const ::pt::ListData& TableData::listdata(int index) const {
  // @@protoc_insertion_point(field_get:pt.TableData.listData)
  return listdata_.Get(index);
}
::pt::ListData* TableData::mutable_listdata(int index) {
  // @@protoc_insertion_point(field_mutable:pt.TableData.listData)
  return listdata_.Mutable(index);
}
::pt::ListData* TableData::add_listdata() {
  // @@protoc_insertion_point(field_add:pt.TableData.listData)
  return listdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::pt::ListData >*
TableData::mutable_listdata() {
  // @@protoc_insertion_point(field_mutable_list:pt.TableData.listData)
  return &listdata_;
}
const ::google::protobuf::RepeatedPtrField< ::pt::ListData >&
TableData::listdata() const {
  // @@protoc_insertion_point(field_list:pt.TableData.listData)
  return listdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyMapData::kKeyFieldNumber;
const int KeyMapData::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyMapData::KeyMapData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.KeyMapData)
}
KeyMapData::KeyMapData(const KeyMapData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_mapdata()) {
    mapdata_ = new ::pt::MapData(*from.mapdata_);
  } else {
    mapdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pt.KeyMapData)
}

void KeyMapData::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapdata_ = NULL;
  _cached_size_ = 0;
}

KeyMapData::~KeyMapData() {
  // @@protoc_insertion_point(destructor:pt.KeyMapData)
  SharedDtor();
}

void KeyMapData::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete mapdata_;
  }
}

void KeyMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyMapData::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyMapData& KeyMapData::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyMapData* KeyMapData::New(::google::protobuf::Arena* arena) const {
  KeyMapData* n = new KeyMapData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.KeyMapData)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mapdata_ != NULL) {
    delete mapdata_;
  }
  mapdata_ = NULL;
}

bool KeyMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.KeyMapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.KeyMapData.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pt.MapData mapData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.KeyMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.KeyMapData)
  return false;
#undef DO_
}

void KeyMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.KeyMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.KeyMapData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .pt.MapData mapData = 2;
  if (this->has_mapdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mapdata_, output);
  }

  // @@protoc_insertion_point(serialize_end:pt.KeyMapData)
}

::google::protobuf::uint8* KeyMapData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.KeyMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.KeyMapData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .pt.MapData mapData = 2;
  if (this->has_mapdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mapdata_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.KeyMapData)
  return target;
}

size_t KeyMapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.KeyMapData)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .pt.MapData mapData = 2;
  if (this->has_mapdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mapdata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyMapData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.KeyMapData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyMapData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyMapData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.KeyMapData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.KeyMapData)
    MergeFrom(*source);
  }
}

void KeyMapData::MergeFrom(const KeyMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.KeyMapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_mapdata()) {
    mutable_mapdata()->::pt::MapData::MergeFrom(from.mapdata());
  }
}

void KeyMapData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.KeyMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyMapData::CopyFrom(const KeyMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.KeyMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyMapData::IsInitialized() const {
  return true;
}

void KeyMapData::Swap(KeyMapData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyMapData::InternalSwap(KeyMapData* other) {
  key_.Swap(&other->key_);
  std::swap(mapdata_, other->mapdata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyMapData::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyMapData

// string key = 1;
void KeyMapData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyMapData::key() const {
  // @@protoc_insertion_point(field_get:pt.KeyMapData.key)
  return key_.GetNoArena();
}
void KeyMapData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.KeyMapData.key)
}
#if LANG_CXX11
void KeyMapData::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.KeyMapData.key)
}
#endif
void KeyMapData::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.KeyMapData.key)
}
void KeyMapData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.KeyMapData.key)
}
::std::string* KeyMapData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pt.KeyMapData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyMapData::release_key() {
  // @@protoc_insertion_point(field_release:pt.KeyMapData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyMapData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pt.KeyMapData.key)
}

// .pt.MapData mapData = 2;
bool KeyMapData::has_mapdata() const {
  return this != internal_default_instance() && mapdata_ != NULL;
}
void KeyMapData::clear_mapdata() {
  if (GetArenaNoVirtual() == NULL && mapdata_ != NULL) delete mapdata_;
  mapdata_ = NULL;
}
const ::pt::MapData& KeyMapData::mapdata() const {
  // @@protoc_insertion_point(field_get:pt.KeyMapData.mapData)
  return mapdata_ != NULL ? *mapdata_
                         : *::pt::MapData::internal_default_instance();
}
::pt::MapData* KeyMapData::mutable_mapdata() {
  
  if (mapdata_ == NULL) {
    mapdata_ = new ::pt::MapData;
  }
  // @@protoc_insertion_point(field_mutable:pt.KeyMapData.mapData)
  return mapdata_;
}
::pt::MapData* KeyMapData::release_mapdata() {
  // @@protoc_insertion_point(field_release:pt.KeyMapData.mapData)
  
  ::pt::MapData* temp = mapdata_;
  mapdata_ = NULL;
  return temp;
}
void KeyMapData::set_allocated_mapdata(::pt::MapData* mapdata) {
  delete mapdata_;
  mapdata_ = mapdata;
  if (mapdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.KeyMapData.mapData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyListData::kKeyFieldNumber;
const int KeyListData::kListDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyListData::KeyListData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.KeyListData)
}
KeyListData::KeyListData(const KeyListData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_listdata()) {
    listdata_ = new ::pt::ListData(*from.listdata_);
  } else {
    listdata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pt.KeyListData)
}

void KeyListData::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listdata_ = NULL;
  _cached_size_ = 0;
}

KeyListData::~KeyListData() {
  // @@protoc_insertion_point(destructor:pt.KeyListData)
  SharedDtor();
}

void KeyListData::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete listdata_;
  }
}

void KeyListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyListData::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyListData& KeyListData::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyListData* KeyListData::New(::google::protobuf::Arena* arena) const {
  KeyListData* n = new KeyListData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.KeyListData)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && listdata_ != NULL) {
    delete listdata_;
  }
  listdata_ = NULL;
}

bool KeyListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.KeyListData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.KeyListData.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pt.ListData listData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.KeyListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.KeyListData)
  return false;
#undef DO_
}

void KeyListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.KeyListData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.KeyListData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .pt.ListData listData = 2;
  if (this->has_listdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->listdata_, output);
  }

  // @@protoc_insertion_point(serialize_end:pt.KeyListData)
}

::google::protobuf::uint8* KeyListData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.KeyListData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.KeyListData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .pt.ListData listData = 2;
  if (this->has_listdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->listdata_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.KeyListData)
  return target;
}

size_t KeyListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.KeyListData)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .pt.ListData listData = 2;
  if (this->has_listdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->listdata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyListData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.KeyListData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyListData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyListData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.KeyListData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.KeyListData)
    MergeFrom(*source);
  }
}

void KeyListData::MergeFrom(const KeyListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.KeyListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_listdata()) {
    mutable_listdata()->::pt::ListData::MergeFrom(from.listdata());
  }
}

void KeyListData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.KeyListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyListData::CopyFrom(const KeyListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.KeyListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyListData::IsInitialized() const {
  return true;
}

void KeyListData::Swap(KeyListData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyListData::InternalSwap(KeyListData* other) {
  key_.Swap(&other->key_);
  std::swap(listdata_, other->listdata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyListData::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyListData

// string key = 1;
void KeyListData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyListData::key() const {
  // @@protoc_insertion_point(field_get:pt.KeyListData.key)
  return key_.GetNoArena();
}
void KeyListData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.KeyListData.key)
}
#if LANG_CXX11
void KeyListData::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.KeyListData.key)
}
#endif
void KeyListData::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.KeyListData.key)
}
void KeyListData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.KeyListData.key)
}
::std::string* KeyListData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pt.KeyListData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyListData::release_key() {
  // @@protoc_insertion_point(field_release:pt.KeyListData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyListData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pt.KeyListData.key)
}

// .pt.ListData listData = 2;
bool KeyListData::has_listdata() const {
  return this != internal_default_instance() && listdata_ != NULL;
}
void KeyListData::clear_listdata() {
  if (GetArenaNoVirtual() == NULL && listdata_ != NULL) delete listdata_;
  listdata_ = NULL;
}
const ::pt::ListData& KeyListData::listdata() const {
  // @@protoc_insertion_point(field_get:pt.KeyListData.listData)
  return listdata_ != NULL ? *listdata_
                         : *::pt::ListData::internal_default_instance();
}
::pt::ListData* KeyListData::mutable_listdata() {
  
  if (listdata_ == NULL) {
    listdata_ = new ::pt::ListData;
  }
  // @@protoc_insertion_point(field_mutable:pt.KeyListData.listData)
  return listdata_;
}
::pt::ListData* KeyListData::release_listdata() {
  // @@protoc_insertion_point(field_release:pt.KeyListData.listData)
  
  ::pt::ListData* temp = listdata_;
  listdata_ = NULL;
  return temp;
}
void KeyListData::set_allocated_listdata(::pt::ListData* listdata) {
  delete listdata_;
  listdata_ = listdata;
  if (listdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.KeyListData.listData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyTableData::kKeyFieldNumber;
const int KeyTableData::kTableDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyTableData::KeyTableData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.KeyTableData)
}
KeyTableData::KeyTableData(const KeyTableData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_tabledata()) {
    tabledata_ = new ::pt::TableData(*from.tabledata_);
  } else {
    tabledata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pt.KeyTableData)
}

void KeyTableData::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tabledata_ = NULL;
  _cached_size_ = 0;
}

KeyTableData::~KeyTableData() {
  // @@protoc_insertion_point(destructor:pt.KeyTableData)
  SharedDtor();
}

void KeyTableData::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tabledata_;
  }
}

void KeyTableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyTableData::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyTableData& KeyTableData::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyTableData* KeyTableData::New(::google::protobuf::Arena* arena) const {
  KeyTableData* n = new KeyTableData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyTableData::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.KeyTableData)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tabledata_ != NULL) {
    delete tabledata_;
  }
  tabledata_ = NULL;
}

bool KeyTableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.KeyTableData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.KeyTableData.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pt.TableData tableData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tabledata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.KeyTableData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.KeyTableData)
  return false;
#undef DO_
}

void KeyTableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.KeyTableData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.KeyTableData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .pt.TableData tableData = 2;
  if (this->has_tabledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tabledata_, output);
  }

  // @@protoc_insertion_point(serialize_end:pt.KeyTableData)
}

::google::protobuf::uint8* KeyTableData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.KeyTableData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.KeyTableData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .pt.TableData tableData = 2;
  if (this->has_tabledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tabledata_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.KeyTableData)
  return target;
}

size_t KeyTableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.KeyTableData)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .pt.TableData tableData = 2;
  if (this->has_tabledata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tabledata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyTableData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.KeyTableData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyTableData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyTableData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.KeyTableData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.KeyTableData)
    MergeFrom(*source);
  }
}

void KeyTableData::MergeFrom(const KeyTableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.KeyTableData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_tabledata()) {
    mutable_tabledata()->::pt::TableData::MergeFrom(from.tabledata());
  }
}

void KeyTableData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.KeyTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyTableData::CopyFrom(const KeyTableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.KeyTableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyTableData::IsInitialized() const {
  return true;
}

void KeyTableData::Swap(KeyTableData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyTableData::InternalSwap(KeyTableData* other) {
  key_.Swap(&other->key_);
  std::swap(tabledata_, other->tabledata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyTableData::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyTableData

// string key = 1;
void KeyTableData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyTableData::key() const {
  // @@protoc_insertion_point(field_get:pt.KeyTableData.key)
  return key_.GetNoArena();
}
void KeyTableData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.KeyTableData.key)
}
#if LANG_CXX11
void KeyTableData::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.KeyTableData.key)
}
#endif
void KeyTableData::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.KeyTableData.key)
}
void KeyTableData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.KeyTableData.key)
}
::std::string* KeyTableData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:pt.KeyTableData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyTableData::release_key() {
  // @@protoc_insertion_point(field_release:pt.KeyTableData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyTableData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pt.KeyTableData.key)
}

// .pt.TableData tableData = 2;
bool KeyTableData::has_tabledata() const {
  return this != internal_default_instance() && tabledata_ != NULL;
}
void KeyTableData::clear_tabledata() {
  if (GetArenaNoVirtual() == NULL && tabledata_ != NULL) delete tabledata_;
  tabledata_ = NULL;
}
const ::pt::TableData& KeyTableData::tabledata() const {
  // @@protoc_insertion_point(field_get:pt.KeyTableData.tableData)
  return tabledata_ != NULL ? *tabledata_
                         : *::pt::TableData::internal_default_instance();
}
::pt::TableData* KeyTableData::mutable_tabledata() {
  
  if (tabledata_ == NULL) {
    tabledata_ = new ::pt::TableData;
  }
  // @@protoc_insertion_point(field_mutable:pt.KeyTableData.tableData)
  return tabledata_;
}
::pt::TableData* KeyTableData::release_tabledata() {
  // @@protoc_insertion_point(field_release:pt.KeyTableData.tableData)
  
  ::pt::TableData* temp = tabledata_;
  tabledata_ = NULL;
  return temp;
}
void KeyTableData::set_allocated_tabledata(::pt::TableData* tabledata) {
  delete tabledata_;
  tabledata_ = tabledata;
  if (tabledata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.KeyTableData.tableData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoMessage::kRspCodeFieldNumber;
const int ProtoMessage::kKeyMapDataFieldNumber;
const int ProtoMessage::kKeyListDataFieldNumber;
const int ProtoMessage::kKeyTableDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoMessage::ProtoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ProtoMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.ProtoMessage)
}
ProtoMessage::ProtoMessage(const ProtoMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rspcode()) {
    rspcode_ = new ::pt::RspCode(*from.rspcode_);
  } else {
    rspcode_ = NULL;
  }
  if (from.has_keymapdata()) {
    keymapdata_ = new ::pt::KeyMapData(*from.keymapdata_);
  } else {
    keymapdata_ = NULL;
  }
  if (from.has_keylistdata()) {
    keylistdata_ = new ::pt::KeyListData(*from.keylistdata_);
  } else {
    keylistdata_ = NULL;
  }
  if (from.has_keytabledata()) {
    keytabledata_ = new ::pt::KeyTableData(*from.keytabledata_);
  } else {
    keytabledata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pt.ProtoMessage)
}

void ProtoMessage::SharedCtor() {
  ::memset(&rspcode_, 0, reinterpret_cast<char*>(&keytabledata_) -
    reinterpret_cast<char*>(&rspcode_) + sizeof(keytabledata_));
  _cached_size_ = 0;
}

ProtoMessage::~ProtoMessage() {
  // @@protoc_insertion_point(destructor:pt.ProtoMessage)
  SharedDtor();
}

void ProtoMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete rspcode_;
  }
  if (this != internal_default_instance()) {
    delete keymapdata_;
  }
  if (this != internal_default_instance()) {
    delete keylistdata_;
  }
  if (this != internal_default_instance()) {
    delete keytabledata_;
  }
}

void ProtoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMessage::descriptor() {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoMessage& ProtoMessage::default_instance() {
  protobuf_ProtoMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoMessage* ProtoMessage::New(::google::protobuf::Arena* arena) const {
  ProtoMessage* n = new ProtoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.ProtoMessage)
  if (GetArenaNoVirtual() == NULL && rspcode_ != NULL) {
    delete rspcode_;
  }
  rspcode_ = NULL;
  if (GetArenaNoVirtual() == NULL && keymapdata_ != NULL) {
    delete keymapdata_;
  }
  keymapdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && keylistdata_ != NULL) {
    delete keylistdata_;
  }
  keylistdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && keytabledata_ != NULL) {
    delete keytabledata_;
  }
  keytabledata_ = NULL;
}

bool ProtoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.ProtoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pt.RspCode rspCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rspcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pt.KeyMapData keyMapData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keymapdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pt.KeyListData keyListData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keylistdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pt.KeyTableData keyTableData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keytabledata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.ProtoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.ProtoMessage)
  return false;
#undef DO_
}

void ProtoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.ProtoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pt.RspCode rspCode = 1;
  if (this->has_rspcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rspcode_, output);
  }

  // .pt.KeyMapData keyMapData = 2;
  if (this->has_keymapdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->keymapdata_, output);
  }

  // .pt.KeyListData keyListData = 3;
  if (this->has_keylistdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keylistdata_, output);
  }

  // .pt.KeyTableData keyTableData = 4;
  if (this->has_keytabledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->keytabledata_, output);
  }

  // @@protoc_insertion_point(serialize_end:pt.ProtoMessage)
}

::google::protobuf::uint8* ProtoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.ProtoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pt.RspCode rspCode = 1;
  if (this->has_rspcode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->rspcode_, deterministic, target);
  }

  // .pt.KeyMapData keyMapData = 2;
  if (this->has_keymapdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->keymapdata_, deterministic, target);
  }

  // .pt.KeyListData keyListData = 3;
  if (this->has_keylistdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keylistdata_, deterministic, target);
  }

  // .pt.KeyTableData keyTableData = 4;
  if (this->has_keytabledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->keytabledata_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.ProtoMessage)
  return target;
}

size_t ProtoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.ProtoMessage)
  size_t total_size = 0;

  // .pt.RspCode rspCode = 1;
  if (this->has_rspcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rspcode_);
  }

  // .pt.KeyMapData keyMapData = 2;
  if (this->has_keymapdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keymapdata_);
  }

  // .pt.KeyListData keyListData = 3;
  if (this->has_keylistdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keylistdata_);
  }

  // .pt.KeyTableData keyTableData = 4;
  if (this->has_keytabledata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keytabledata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.ProtoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.ProtoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.ProtoMessage)
    MergeFrom(*source);
  }
}

void ProtoMessage::MergeFrom(const ProtoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.ProtoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rspcode()) {
    mutable_rspcode()->::pt::RspCode::MergeFrom(from.rspcode());
  }
  if (from.has_keymapdata()) {
    mutable_keymapdata()->::pt::KeyMapData::MergeFrom(from.keymapdata());
  }
  if (from.has_keylistdata()) {
    mutable_keylistdata()->::pt::KeyListData::MergeFrom(from.keylistdata());
  }
  if (from.has_keytabledata()) {
    mutable_keytabledata()->::pt::KeyTableData::MergeFrom(from.keytabledata());
  }
}

void ProtoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.ProtoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMessage::CopyFrom(const ProtoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.ProtoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMessage::IsInitialized() const {
  return true;
}

void ProtoMessage::Swap(ProtoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoMessage::InternalSwap(ProtoMessage* other) {
  std::swap(rspcode_, other->rspcode_);
  std::swap(keymapdata_, other->keymapdata_);
  std::swap(keylistdata_, other->keylistdata_);
  std::swap(keytabledata_, other->keytabledata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoMessage::GetMetadata() const {
  protobuf_ProtoMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoMessage

// .pt.RspCode rspCode = 1;
bool ProtoMessage::has_rspcode() const {
  return this != internal_default_instance() && rspcode_ != NULL;
}
void ProtoMessage::clear_rspcode() {
  if (GetArenaNoVirtual() == NULL && rspcode_ != NULL) delete rspcode_;
  rspcode_ = NULL;
}
const ::pt::RspCode& ProtoMessage::rspcode() const {
  // @@protoc_insertion_point(field_get:pt.ProtoMessage.rspCode)
  return rspcode_ != NULL ? *rspcode_
                         : *::pt::RspCode::internal_default_instance();
}
::pt::RspCode* ProtoMessage::mutable_rspcode() {
  
  if (rspcode_ == NULL) {
    rspcode_ = new ::pt::RspCode;
  }
  // @@protoc_insertion_point(field_mutable:pt.ProtoMessage.rspCode)
  return rspcode_;
}
::pt::RspCode* ProtoMessage::release_rspcode() {
  // @@protoc_insertion_point(field_release:pt.ProtoMessage.rspCode)
  
  ::pt::RspCode* temp = rspcode_;
  rspcode_ = NULL;
  return temp;
}
void ProtoMessage::set_allocated_rspcode(::pt::RspCode* rspcode) {
  delete rspcode_;
  rspcode_ = rspcode;
  if (rspcode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.ProtoMessage.rspCode)
}

// .pt.KeyMapData keyMapData = 2;
bool ProtoMessage::has_keymapdata() const {
  return this != internal_default_instance() && keymapdata_ != NULL;
}
void ProtoMessage::clear_keymapdata() {
  if (GetArenaNoVirtual() == NULL && keymapdata_ != NULL) delete keymapdata_;
  keymapdata_ = NULL;
}
const ::pt::KeyMapData& ProtoMessage::keymapdata() const {
  // @@protoc_insertion_point(field_get:pt.ProtoMessage.keyMapData)
  return keymapdata_ != NULL ? *keymapdata_
                         : *::pt::KeyMapData::internal_default_instance();
}
::pt::KeyMapData* ProtoMessage::mutable_keymapdata() {
  
  if (keymapdata_ == NULL) {
    keymapdata_ = new ::pt::KeyMapData;
  }
  // @@protoc_insertion_point(field_mutable:pt.ProtoMessage.keyMapData)
  return keymapdata_;
}
::pt::KeyMapData* ProtoMessage::release_keymapdata() {
  // @@protoc_insertion_point(field_release:pt.ProtoMessage.keyMapData)
  
  ::pt::KeyMapData* temp = keymapdata_;
  keymapdata_ = NULL;
  return temp;
}
void ProtoMessage::set_allocated_keymapdata(::pt::KeyMapData* keymapdata) {
  delete keymapdata_;
  keymapdata_ = keymapdata;
  if (keymapdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.ProtoMessage.keyMapData)
}

// .pt.KeyListData keyListData = 3;
bool ProtoMessage::has_keylistdata() const {
  return this != internal_default_instance() && keylistdata_ != NULL;
}
void ProtoMessage::clear_keylistdata() {
  if (GetArenaNoVirtual() == NULL && keylistdata_ != NULL) delete keylistdata_;
  keylistdata_ = NULL;
}
const ::pt::KeyListData& ProtoMessage::keylistdata() const {
  // @@protoc_insertion_point(field_get:pt.ProtoMessage.keyListData)
  return keylistdata_ != NULL ? *keylistdata_
                         : *::pt::KeyListData::internal_default_instance();
}
::pt::KeyListData* ProtoMessage::mutable_keylistdata() {
  
  if (keylistdata_ == NULL) {
    keylistdata_ = new ::pt::KeyListData;
  }
  // @@protoc_insertion_point(field_mutable:pt.ProtoMessage.keyListData)
  return keylistdata_;
}
::pt::KeyListData* ProtoMessage::release_keylistdata() {
  // @@protoc_insertion_point(field_release:pt.ProtoMessage.keyListData)
  
  ::pt::KeyListData* temp = keylistdata_;
  keylistdata_ = NULL;
  return temp;
}
void ProtoMessage::set_allocated_keylistdata(::pt::KeyListData* keylistdata) {
  delete keylistdata_;
  keylistdata_ = keylistdata;
  if (keylistdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.ProtoMessage.keyListData)
}

// .pt.KeyTableData keyTableData = 4;
bool ProtoMessage::has_keytabledata() const {
  return this != internal_default_instance() && keytabledata_ != NULL;
}
void ProtoMessage::clear_keytabledata() {
  if (GetArenaNoVirtual() == NULL && keytabledata_ != NULL) delete keytabledata_;
  keytabledata_ = NULL;
}
const ::pt::KeyTableData& ProtoMessage::keytabledata() const {
  // @@protoc_insertion_point(field_get:pt.ProtoMessage.keyTableData)
  return keytabledata_ != NULL ? *keytabledata_
                         : *::pt::KeyTableData::internal_default_instance();
}
::pt::KeyTableData* ProtoMessage::mutable_keytabledata() {
  
  if (keytabledata_ == NULL) {
    keytabledata_ = new ::pt::KeyTableData;
  }
  // @@protoc_insertion_point(field_mutable:pt.ProtoMessage.keyTableData)
  return keytabledata_;
}
::pt::KeyTableData* ProtoMessage::release_keytabledata() {
  // @@protoc_insertion_point(field_release:pt.ProtoMessage.keyTableData)
  
  ::pt::KeyTableData* temp = keytabledata_;
  keytabledata_ = NULL;
  return temp;
}
void ProtoMessage::set_allocated_keytabledata(::pt::KeyTableData* keytabledata) {
  delete keytabledata_;
  keytabledata_ = keytabledata;
  if (keytabledata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.ProtoMessage.keyTableData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pt

// @@protoc_insertion_point(global_scope)
