#设置CMAKE最低版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.1.1)
SET(CMAKE_CXX_STANDARD 11)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")

if(${DEBUGRELEASE} STREQUAL "debug")
#设置项目名称
SET(PROJECT_NAME LogSenderd)
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Wl,-rpath=. -O0 -g -ggdb ")
SET(CMAKE_BUILD_TYPE "Debug")
elseif(${DEBUGRELEASE} STREQUAL "release")
#设置项目名称
SET(PROJECT_NAME LogSender)
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -Wl,-rpath=. -O0")
SET(CMAKE_BUILD_TYPE "Release")
endif()

if(${BIT} STREQUAL "32")
MESSAGE(STATUS "using 32bits")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
elseif(${BIT} STREQUAL "64")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
endif()

#建立项目
PROJECT(${PROJECT_NAME})

#MESSAGE("PROJECT_SOURCE_DIR = ${PROJECT_SOURCE_DIR}")
#${PROJECT_SOURCE_DIR}="xueyelingshuang/src/LogSender/scripts"
#SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin/)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../../../lib/)

#添加包含目录
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/../../../include/)

#添加库目录
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/../../../lib/)

#获取代码，在项目中，将所有代码都放在src文件夹中
AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR}/../LogSender/src/ DIR_SRCS)
#编译可执行程序
#ADD_EXECUTABLE(${PROJECT_NAME} ${DIR_SRCS})

if(${DLLLIB} STREQUAL "dll")
#如果要生成动态链接库
ADD_LIBRARY(${PROJECT_NAME} SHARED ${DIR_SRCS})
elseif(${DLLLIB} STREQUAL "lib")
#如果要生成静态链接库
ADD_LIBRARY(${PROJECT_NAME} STATIC ${DIR_SRCS})
endif()

#添加库
list(APPEND LIBRARYLIST ${LIBRARIESRELY})
foreach (EVERYLIBRARY ${LIBRARYLIST})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_SOURCE_DIR}/../../../lib/${EVERYLIBRARY})
endforeach ()
