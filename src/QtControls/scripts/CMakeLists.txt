#设置CMAKE最低版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.10.1)
SET(CMAKE_CXX_STANDARD 11)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -finput-charset='gb2312'")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -finput-charset='gb2312'")

if(${DEBUGRELEASE} STREQUAL "debug")
#设置项目名称
SET(PROJECT_NAME QtControlsd)
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Wl,-rpath=. -O0 -g -ggdb ")
SET(CMAKE_BUILD_TYPE "Debug")
elseif(${DEBUGRELEASE} STREQUAL "release")
#设置项目名称
SET(PROJECT_NAME QtControls)
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -Wl,-rpath=. -O0")
SET(CMAKE_BUILD_TYPE "Release")
endif()

if(${BIT} STREQUAL "32")
MESSAGE(STATUS "using 32bits")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
SET(QT5_GCC "$ENV{QT5GCC32}")
elseif(${BIT} STREQUAL "64")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
SET(QT5_GCC "$ENV{QT5GCC64}")
endif()

#建立项目
PROJECT(${PROJECT_NAME})

#MESSAGE("PROJECT_SOURCE_DIR = ${PROJECT_SOURCE_DIR}")
#${PROJECT_SOURCE_DIR}="xueyelingshuang/src/QtControls/script"
#SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../../../lib/)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../../../lib/)

#添加包含目录
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/../../../include/)

#添加库目录
LINK_DIRECTORIES(${PROJECT_SOURCE_DIR}/../../../lib/)

SET(CMAKE_INCLUDE_CURRENT_DIR ON) 

#添加QT库
SET(CMAKE_AUTOMOC ON)

SET(Qt5_DIR "${QT5_GCC}/lib/cmake/Qt5")

INCLUDE_DIRECTORIES("${QT5_GCC}/include/")

#添加Qt依赖库
SET(QTRELY Widgets;Core;Gui;Network;WebKit;WebKitWidgets;Xml;X11Extras)

list(APPEND QTRELYLIST ${QTRELY})
foreach (EVERYQTRELY ${QTRELYLIST})
SET(Qt5${EVERYQTRELY}_DIR "${QT5_GCC}/lib/cmake/Qt5${EVERYQTRELY}")
FIND_PACKAGE(Qt5${EVERYQTRELY})
INCLUDE_DIRECTORIES("${QT5_GCC}/include/Qt${EVERYQTRELY}/")
endforeach ()

#查找当前文件夹中的所有源代码文件，也可以通过Set命令将所有文件设置为一个变量
AUX_SOURCE_DIRECTORY("${PROJECT_SOURCE_DIR}/../QtControls/src/" DIR_SRCS)
#查找当前文件夹中所有的ui文件
FILE(GLOB UI_FILES "${PROJECT_SOURCE_DIR}/../QtControls/src/*.ui") 
#转换UI文件
QT5_WRAP_UI(WRAP_FILES ${UI_FILES})
#设置qrc
#SET(RCC_FILES "${PROJECT_SOURCE_DIR}/../QtControls/src/QtControls.qrc")

#编译可执行程序
#ADD_EXECUTABLE(${PROJECT_NAME} ${DIR_SRCS} ${RCC_FILES} ${WRAP_FILES})

if(${DLLLIB} STREQUAL "dll")
#如果要生成动态链接库
ADD_LIBRARY(${PROJECT_NAME} SHARED ${DIR_SRCS} ${RCC_FILES} ${WRAP_FILES})
elseif(${DLLLIB} STREQUAL "lib")
#如果要生成静态链接库
ADD_LIBRARY(${PROJECT_NAME} STATIC ${DIR_SRCS} ${RCC_FILES} ${WRAP_FILES})
endif()

foreach (EVERYQTRELY ${QTRELYLIST})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} "${QT5_GCC}/lib/libQt5${EVERYQTRELY}.so")
endforeach ()

#添加库
list(APPEND LIBRARYLIST ${LIBRARIESRELY})
foreach (EVERYLIBRARY ${LIBRARYLIST})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_SOURCE_DIR}/../../../lib/${EVERYLIBRARY})
endforeach ()